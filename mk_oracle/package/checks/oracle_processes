#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# | Copyright Thorsten Bruhns   thorsten.bruhns@opitz-consulting.com |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#<<<oracle_processes>>>
# ORACLE_SID processes_pct processes_count processes_max
# trac1  24 36 150

oracle_processes_default_levels = (50, 80)

def inventory_oracle_processes(info):
    return [ (line[0], "oracle_processes_default_levels") for line in info if len(line) >= 4 ]

def check_oracle_processes(item, params, info):
    for line in info:
        if line[0] == item:
            err = oracle_handle_ora_errors(line)
            if err == False:
                continue
            elif isinstance(err, tuple):
                return err

            warn, crit = params

            processes_pct = int(line[1])
            processes_num = int(line[2])
            processes_max = int(line[3])

            processes_warn = processes_max * warn / 100
            processes_crit = processes_max * crit / 100

            infotext = " - %d%% of %d processes are used (levels at %d/%d)" \
                % (processes_pct, processes_max, warn, crit)
            perfdata = [("processes_cnt", processes_num, processes_warn, processes_crit)]
            if processes_pct >= crit:
                return (2, "CRIT" + infotext, perfdata)
            elif processes_pct >= warn:
                return (1, "WARN" + infotext, perfdata)
            else:
                return (0, "OK" + infotext, perfdata)
    return (3, "UNKNOWN - Database not existing or not running")

check_info['oracle_processes'] = (check_oracle_processes, "ORA %s Processes", 1,  inventory_oracle_processes )
checkgroup_of['oracle_processes'] = "oracle_processes"
#check_includes['oracle_processes'] = [ "oracle.include" ]
