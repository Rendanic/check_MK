#!/bin/bash
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check_MK agent plugin for monitoring ORACLE databases

# Get list of all running databases
SIDS=$(UNIX95=true ps ax -o args | sed -n '/^\(ora\|xe\)_pmon_\([^ ]*\)/s//\2/p')
if [ -z "$SIDS" ] ; then 
    # If on this system we've already found a database
    if [ -e "$MK_CONFDIR/mk_oracle.found" ] ; then
        echo '<<<oracle_version>>>'
        echo '<<<oracle_sessions>>>'
        echo '<<<oracle_logswitches>>>'
        echo '<<<oracle_tablespaces>>>'
        echo '<<<oracle_ts_quotas>>>'
        echo '<<<oracle_recovery_area>>>'
    fi
    exit 0
fi

touch $MK_CONFDIR/mk_oracle.found

# Recreate data if cachefile is older than 120 seconds.
# If you set this to 0, then the cache file will be created
# as often as possible. If the database queries last longer
# then your check interval, caching will be active nevertheless.
CACHE_MAXAGE=120
CACHE_MAXAGE_TABLESPACE=600

# Source the optional configuration file for this agent plugin
if [ -e "$MK_CONFDIR/mk_oracle.cfg" ]
then
    . $MK_CONFDIR/mk_oracle.cfg
fi

# You can specify a list of SIDs to monitor. Those databases will
# only be handled, if they are found running, though! 
#
#   ONLY_SIDS="XE HIRN SEPP"
#
# It is possible to filter SIDS negatively. Just add the following to
# the mk_oracle.cfg file:
#
#   EXCLUDE_<sid>="ALL"
#
# Another option is to filter single checks for SIDS. Just add
# lines as follows to the mk_oracle.cfg file. One service per
# line:
#
#   EXCLUDE_<sid>="<service>"
#
# For example skip oracle_sessions and oracle_logswitches checks
# for the instance "mysid".
#
#   EXCLUDE_mysid="sessions logswitches"
#
#
# This check uses a cache file to prevent problems with long running
# SQL queries. It starts building a cache when
#   a) no cache is present or the cache is too old and
#   b) the cache is not currently being built
# The cache is used for $CACHE_MAXAGE seconds. The CACHE_MAXAGE
# option is pre-set to 120 seconds but can be changed in mk_oracle.cfg.

# complete rework of the plugin done by Thorsten Bruhns (thorsten.bruhns@opitz-consulting.com)
# There is a new strategy in this plugin. We loop over all SIDs with EXLUDE an INCLUDEs like before.
# We don't do a login for each check anymore. The needed checks are written to a sql-file and executed together in 1 Session. This reduces the amount of logins to the database and increases the speed of the plugin.
#
# There is an ability to configre a cache time for each type of check.
# Tablespace-Checks every 10 minutes due to high load on databases with a lot of tablespaces!
# Sessions are checked at 2 minutes interval
#
#
# Remove old cache files at the start of the plugin. No old garbage from non existing databases anymore.
# Create a temporary sql file in /tmp for each execute of the plugin. This file includes only the needed checks dependent from the age of the cache files. This gives us the ability to use different ages for the type of checks.
#
# - clear cache
#   remove old cache files from database who are not running anymore
#

#
function sqlplus ()
{
    if OUTPUT=$({ echo 'set pages 0 trimspool on' ; echo 'whenever sqlerror exit 1'; echo 'set lines 8000' ; echo 'set feedback off'; cat ; } | $MK_CONFDIR/sqlplus.sh $1)
    then
        # add ORACLE_SID at start of each line. Don't do that for line with '<<<text>>>'
        echo "${OUTPUT}" | sed -e 's/[[:space:]]\+/ /g' -e '/^[[:space:]]*$/d' -e "/^<<<.*>>>$/! s/^/$1 /"
    else
        echo "${OUTPUT}" | sed "s/^/$1 FAILURE /"
    fi
}

clear_cache ()
{
    # remove old cache-files
    # cached files are removed after 120 minutes
    CLEAN_CACHE_MAXAGE=7200
    if [ -d $MK_CONFDIR ]
    then
        NOW=$(date +%s)
        for CACHE_FILE in $(find $MK_CONFDIR -name "oracle_*.cache")
        do
            MTIME=$(stat -c %Y $CACHE_FILE)
            if [ $(($NOW - $MTIME)) -ge $CLEAN_CACHE_MAXAGE ]
            then
                rm -f $CACHE_FILE
            fi
        done
    fi
    # remove old temporary data from tmp
    # we need to spool to /tmp from sqlplus and move the result to MK_CONFDIR
    for CACHE_FILE in $(find $TMP_CACHEDIR -name ".check_mk_oracle_*.cache")
    do
        MTIME=$(stat -c %Y $CACHE_FILE)
        if [ $(($NOW - $MTIME)) -ge $CLEAN_CACHE_MAXAGE ]
        then
            rm -f $CACHE_FILE
        fi
    done
}

do_spool_tablespace()
{
    # convert READ ONLY to READONLY for later splitting of results in cmk.
    filename=${1}
    resultfile=$2
    echo "spool "$resultfile >> $filename
    echo 'PROMPT <<<oracle_tablespaces>>>' >> $filename
    echo "select file_name ||' '|| tablespace_name ||' '|| fstatus ||' '|| AUTOEXTENSIBLE
              ||' '|| blocks ||' '|| maxblocks ||' '|| USER_BLOCKS ||' '|| INCREMENT_BY 
              ||' '|| ONLINE_STATUS ||' '|| BLOCK_SIZE 
              ||' '|| decode(tstatus,'READ ONLY', 'READONLY', tstatus) || ' ' || free_blocks 
              ||' '|| contents
       from (
                select f.file_name, f.tablespace_name, f.status fstatus, f.AUTOEXTENSIBLE,
                f.blocks, f.maxblocks, f.USER_BLOCKS, f.INCREMENT_BY,
                f.ONLINE_STATUS, t.BLOCK_SIZE, t.status tstatus, nvl(sum(fs.blocks),0) free_blocks, t.contents
                from dba_data_files f, dba_tablespaces t, dba_free_space fs
                where f.tablespace_name = t.tablespace_name
                and f.file_id = fs.file_id(+)
                group by f.file_name, f.tablespace_name, f.status, f.autoextensible,
                f.blocks, f.maxblocks, f.user_blocks, f.increment_by, f.online_status,
                t.block_size, t.status, t.contents
                UNION
                select f.file_name, f.tablespace_name, f.status, f.AUTOEXTENSIBLE,
                f.blocks, f.maxblocks, f.USER_BLOCKS, f.INCREMENT_BY, 'TEMP',
                t.BLOCK_SIZE, t.status, sum(sh.blocks_free) free_blocks, 'TEMPORARY'
                from v\$thread th, dba_temp_files f, dba_tablespaces t, v\$temp_space_header sh
                WHERE f.tablespace_name = t.tablespace_name and f.file_id = sh.file_id
                GROUP BY th.instance, f.file_name, f.tablespace_name, f.status,
                f.autoextensible, f.blocks, f.maxblocks, f.user_blocks, f.increment_by,
                'TEMP', t.block_size, t.status);
" >> $filename
}

do_spool_recovery_area()
{
    filename=${1}
    echo 'PROMPT <<<oracle_recovery_area>>>' >> $filename
    echo "select round((SPACE_USED-SPACE_RECLAIMABLE)/SPACE_LIMIT*100)
                 ||' '|| round(SPACE_LIMIT/1024/1024)
                 ||' '|| round(SPACE_USED/1024/1024)
                 ||' '|| round(SPACE_RECLAIMABLE/1024/1024)
          from V\$RECOVERY_FILE_DEST;
         " >> $filename
}

do_spool_ts_quotas()
{
    filename=${1}
    resultfile=$2
    echo "spool "$resultfile >> $filename
    echo 'PROMPT <<<oracle_ts_quotas>>>' >> $filename
    echo "select USERNAME 
                 ||' '|| TABLESPACE_NAME
                 ||' '|| round(bytes/max_bytes*100)
                 ||' '|| BYTES/1024/1024
                 ||' '|| MAX_BYTES/1024/1024
          from dba_ts_quotas 
          where max_bytes  > 0
          order by 1;
         " >> $filename
}

print_cached_data()
{
    cat $2 | sed -e "/^<<<.*>>>$/! s/^/$1 /"
}
clear_cache

for SID in $SIDS; do
    # Check if SID is listed in ONLY_SIDS if this is used
    if [ "$ONLY_SIDS" ] ; then
        SKIP=yes
        for S in $ONLY_SIDS ; do
	    if  [ "$S" = "$SID" ] ; then
                SKIP=
                break
            fi 
        done
        if [ "$SKIP" ] ; then continue ; fi
    fi
        
    EXCLUDE=EXCLUDE_$SID
    EXCLUDE=${!EXCLUDE}
    # SID filtered totally?
    if [ "$EXCLUDE" = "ALL" ]; then
        continue
    fi

    MK_SQLTMPDIR="/tmp"

    # MK_SQLTMPFILE is execute in sqlplus.sh at the end of the loop
    # we need an unique identifier for the sql-file
    MK_SQLTMPFILE=$MK_SQLTMPDIR"/.mk_oracle_oracle_"$SID"_"$(date +%s)".sql"
    MK_SQLTMPFILENOW=$MK_SQLTMPDIR"/.mk_oracle_oracle_"$SID"_now_"$(date +%s)".sql"

    # store the result of sqlplus.sh for each check in 1 file
    # we won't execute every check while running the agent
    # => we add the chached data for each check to complet the result of the agent
    MK_SQLRESULT_TABLESPACE=$MK_SQLTMPDIR"/.mk_oracle_"$SID"_tablespace.data"

    MK_SQLRESULT_TS_QUOTA=$MK_SQLTMPDIR"/.mk_oracle_"$SID"_ts_quota.data"

echo $EXCLUDE_$SID
    # Do Version-Check (use as a general login check) without caching
    # get some interesting data from database and instance
    # these sqls are realy fast. No need to cache these results!
    if [ "$EXCLUDE" = "${EXCLUDE/version/}" ]; then
        sqlplus $SID <<_EOF_
           PROMPT <<<oracle_version>>>
           select banner from v\$version where banner like 'Oracle%';

           prompt <<<oracle_database>>>
           select DBID
                  || ' ' || NAME
                  || ' ' || LOG_MODE
                  || ' ' || DATABASE_ROLE
                  || ' ' || FORCE_LOGGING
           from v\$database;

           prompt <<<oracle_instance>>>
           select VERSION
	          || ' ' || STATUS
	          || ' ' || LOGINS
                  || ' ' || to_char(startup_time,'dd.mm.yyyy hh24:mi:ss') 
           from v\$instance;

           prompt <<<oracle_sessions>>>
           select count(*) from v\$session;
           prompt <<<oracle_processes>>>
           select round(a.cnt/b.maxcnt*100)
                  , a.cnt 
                  , maxcnt
           from (select count(*) cnt 
                 from v\$process
                ) a
               ,(select value maxcnt 
                 from v\$parameter 
                 where name='processes'
                ) b
           ;

           prompt <<<oracle_logswitches>>>
           select count(1) 
           from v\$loghist 
           where first_time > sysdate - 1/24;

_EOF_
    fi

    # current date in unixtime for later usage
    NOW=$(date +%s)
    if [ ! '$EXCLUDE' = '${EXCLUDE/tablespaces/}' ]; then
        # do we have a cached file?
        if [ -f $MK_SQLRESULT_TABLESPACE ]; then
            # Is the cached file outdated?
            MTIME=$(stat -c %Y $MK_SQLRESULT_TABLESPACE)
            if [ $(($NOW - $MTIME)) -gt $CACHE_MAXAGE_TABLESPACE ]; then
                # remove old file!
                rm -f $MK_SQLRESULT_TABLESPACE
                # create sql for tablespace monitoring
                do_spool_tablespace $MK_SQLTMPFILE $MK_SQLRESULT_TABLESPACE
            else
                # print cached data
                print_cached_data $SID $MK_SQLRESULT_TABLESPACE
            fi
        else
            # create sql for tablespace monitoring
            do_spool_tablespace $MK_SQLTMPFILE $MK_SQLRESULT_TABLESPACE
        fi
    fi

    if [ ! '$EXCLUDE' = '${EXCLUDE/recovery_area/}' ]; then
        # no caching on recovery area
        # => this v$-view has a low performance impact on the database
        do_spool_recovery_area $MK_SQLTMPFILENOW
    fi

    if [ ! '$EXCLUDE' = '${EXCLUDE/ts_quotas/}' ]; then
        # do we have a cached file?
        # Tablespace-Quotas and Tablespace use the same cache age
        if [ -f $MK_SQLRESULT_TS_QUOTA ]; then
            # Is the cached file outdated?
            MTIME=$(stat -c %Y $MK_SQLRESULT_TS_QUOTA)
            if [ $(($NOW - $MTIME)) -gt $CACHE_MAXAGE_TABLESPACE ]; then
                # remove old file!
                rm -f $MK_SQLRESULT_TS_QUOTA
                # create sql for user quotas
                do_spool_ts_quotas $MK_SQLTMPFILE $MK_SQLRESULT_TS_QUOTA
            else
                # print cached data
                print_cached_data $SID $MK_SQLRESULT_TS_QUOTA
            fi
        else
            # create sql for user quotas
            do_spool_ts_quotas $MK_SQLTMPFILE $MK_SQLRESULT_TS_QUOTA
        fi
    fi


    # only try to execute sqlplus when data must be read from database
    # this is the synchronous call!
    if [ -f $MK_SQLTMPFILENOW ]
    then
        sqlplus $SID <<_EOF_
@$MK_SQLTMPFILENOW
_EOF_
    fi

    # only try to execute sqlplus when data must be read from database
    # this is the asynchronous call!
    if [ -f $MK_SQLTMPFILE ]
    then
        setsid bash -c "
            set -o noclobber
            function sqlplus ()
            {
                if OUTPUT=\$({ echo 'set pages 0 trimspool on' ; echo 'whenever OSERROR  EXIT ROLLBACK' ; echo 'whenever sqlerror exit 1'; echo 'set lines 8000' ; echo 'set feedback off'; cat ; } | $MK_CONFDIR/sqlplus.sh \$1)
               then
                   echo \"\${OUTPUT}\" | sed -e 's/[[:space:]]\+/ /g' -e '/^[[:space:]]*$/d' -e \"/^<<<.*>>>\$/! s/^/\$1 /\"
               else
                   echo \"\${OUTPUT}\" | sed \"s/^/\$1 FAILURE /\"
                fi
            }
        sqlplus "$SID" <<_EOF_
@$MK_SQLTMPFILE
_EOF_
        "
    fi

    rm -f $MK_SQLTMPFILE $MK_SQLTMPFILENOW
done
