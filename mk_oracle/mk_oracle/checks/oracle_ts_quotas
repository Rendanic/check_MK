#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# | Copyright Thorsten Bruhns   thorsten.bruhns@opitz-consulting.com |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# This check is cluster aware!
# Result of check is OK, WARNING or CRITICAL, when 1 instance is reporting
# a state != UNKNOWN

#<<<oracle_undostat>>>
# <ORACLE_SID> <USER> <Tablespace> <used percent> <used MB> <Limit MB>
#TUX12C GSMADMIN_INTERNAL SYSAUX 1 .9375 100


factory_settings["oracle_ts_quotas_defaults"] = {
    "levels"         : (70.0, 90.0),
}

def inventory_oracle_ts_quotas(info):
    inventory = []
    for line in info:
        ORACLE_SID = line[1]
        inventory.append((ORACLE_SID, "oracle_ts_quotas_defaults"))
    return inventory

def check_oracle_ts_quotas(item, params, info):
    nagstatenum = 0
    infotext = ""
    for line in info:
        if line[1] == item:
            quotauser   = line[2]
            quotatbs    = line[3]
            quotausedpct= int(line[4])
            quotausedmb= line[5]
            quotamaxmb    = line[6]

            # Check Users for quotas
            warn, crit = params.get("levels")

            if nagstatenum == 0 and quotausedpct > warn:
                nagstatenum = 1
                infotext += " User %s Tablespace %s usedMB %s usedpct %d (!) (levels at %s/%s) " \
                            %(quotauser, quotatbs, quotausedmb, quotausedpct, warn, crit)
            elif quotausedpct > crit:
                nagstatenum = 2
                infotext += " User %s Tablespace %s usedpct %d (!!) (levels at %s/%s) " \
                            %(quotauser, quotatbs, quotausedpct, warn, crit)
        if nagstatenum == 0:
            infotext = "All Quotas ok or Instance not running"
        return (nagstatenum, infotext)
    return (3, "UNKNOWN - Quotas not existing or not running")

check_info['oracle_ts_quotas'] = {
    "check_function"          : check_oracle_ts_quotas,
    "inventory_function"      : inventory_oracle_ts_quotas,
    "service_description"     : "ORA %s Quotas",
    "has_perfdata"            : False,
    "node_info"               : True,
    "default_levels_variable" : "oracle_ts_quotas_defaults",
    "group"                   : "oracle_ts_quotas",
}

