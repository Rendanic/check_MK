#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# no used space check for Tablsspaces with CONTENTS in ('TEMPORARY','UNDO')
# It is impossible to check the used space in UNDO and TEMPORARY Tablespaces
# These Types of Tablespaces are ignored in this plugin.
# This restriction is only working with newer agents, because we need an
# additional parameter at end if each datafile


# This definition needs to be removed at a later stage
# A previous version of this check didn't write the parameter
# name into the autochecks file, but the parameter itself
# default levels for *free* space. float: percent,
# integer: MB.
oracle_tablespaces_default_levels = (10.0, 5.0)

factory_settings["oracle_tablespaces_defaults"] = {
    "levels"         : (10.0, 5.0),
    "magic_normsize" : 1000,
    "magic_maxlevels": (60.0, 50.0),
    "defaultincrement": True,
}

# Whether to check auto extend settings
oracle_tablespaces_check_autoext = True

# this parameter is deprecated and needed for old configurations with
# parameter in main.mk. It is not used anymore!
oracle_tablespaces_check_default_increment = True

# <<<oracle_tablespaces>>>
# pengt /database/pengt/daten155/dbf/system_01.dbf SYSTEM AVAILABLE YES 38400 4194302 38392 1280 SYSTEM 8192 ONLINE
# pengt /database/pengt/daten155/dbf/undotbs_01.dbf UNDOTBS1 AVAILABLE YES 128000 4194302 127992 640 ONLINE 8192 ONLINE
# pengt /database/pengt/daten155/dbf/sysaux_01.dbf SYSAUX AVAILABLE YES 25600 4194302 25592 1280 ONLINE 8192 ONLINE
# pengt /database/pengt/daten155/dbf/ts_user_01.dbf TS_USER AVAILABLE YES 8480 1280000 8472 160 ONLINE 8192 ONLINE
# pengt /database/pengt/daten155/dbf/TS_PENG_ABR_01.dbf TS_PENG_ABR AVAILABLE YES 12800 1280000 12792 12800 ONLINE 8192 ONLINE

# Order of columns (it is a table of data files, so table spaces appear multiple times)
# -1 Node info (added by Check_MK)
# 0  database SID
# 1  data file name
# 2  table space name
# 3  status of the data file
# 4  whether the file is auto extensible
# 5  current size of data file in blocks
# 6  maximum size of data file in blocks (if auto extensible)
# 7  currently number of blocks used by user data
# 8  size of next increment in blocks (if auto extensible)
# 9  wheter the file is in use (online)
# 10 block size in bytes
# 11 status of the table space
# 12 free space in the datafile
# 13 Tablespace-Type (PERMANENT, UNDO, TEMPORARY)

def parse_oracle_tablespaces(info):

    table_spaces = {}
    error_sids = {}

    for line in info:
        node_name = line[0]
        line = line[1:]

        # Check for query errors
        err = oracle_handle_ora_errors(line)
        if err == False:
            continue # ignore ancient agent outputs
        elif isinstance(err, tuple):
            sid = line[0]
            error_sids[sid] = err

        if len(line) not in (13, 14):
            continue

        sid, data_file_name, ts_name, data_file_status, autoextensible, \
        file_size, max_file_size, used_blocks, increment_size, file_in_use, \
        block_size, ts_status, free_space = line[:13]

        if len(line) == 14:
            ts_type = line[13]
        else:
            # old behaivor is all Tablespaces are treated as PERMANENT
            ts_type = 'PERMANENT'

        table_space = table_spaces.setdefault((node_name, sid, ts_name), [])

        bs = int(block_size)
        table_space.append({
            "name"           : data_file_name,
            "block_size"     : bs,
            "size"           : int(file_size) * bs,
            "max_size"       : int(max_file_size) * bs,
            "used_size"      : int(used_blocks) * bs,
            "free_space"     : int(free_space) * bs,
            "increment_size" : int(increment_size) * bs,
            "status"         : data_file_status,
            "autoextensible" : autoextensible == "YES",
            "ts_type"        : ts_type,
            "ts_status"      : ts_status,
        })

    # Now join this into one dictionary. If there are more than
    # one nodes per tablespace, then we select that node with the
    # most data files

    result = {}
    for (node_name, sid, ts_name), data_files in table_spaces.items():
        ts_key = (sid, ts_name)
        # Use data from this node, if it is the first/only, or if it
        # has more data files than a previous one
        if ts_key not in result or \
              len(result[ts_key]["data_files"]) < len(data_files):
            result[ts_key] = {
                "data_files"     : data_files,
                "type"           : data_files[0]["ts_type"],
                "status"         : data_files[0]["ts_status"],
                "autoextensible" : False,
            }
            for df in data_files:
                if df["autoextensible"]:
                    result[ts_key]["autoextensible"] = True

    return result, error_sids


def inventory_oracle_tablespaces(parsed):
    table_spaces, error_sids = parsed
    for (sid, ts_name), table_space in table_spaces.items():
        if table_space["status"] in ( "ONLINE", "READONLY" ):
            if oracle_tablespaces_check_autoext:
                ae = table_space["autoextensible"]
            else:
                ae = None # means: ignore, only display setting

            parameters = { "autoextend" : ae }
            yield "%s.%s" % (sid, ts_name), parameters


def check_oracle_tablespaces(item, params, parsed):
    try:
        sid, ts_name = item.split('.')
    except ValueError:
        return (3, 'Invalid check item (must be <SID>.<tablespace>)')

    table_spaces, error_sids = parsed
    if sid in error_sids:
        return error_sids[sid]

    table_space = table_spaces.get((sid, ts_name))
    if not table_space:

        # possible no connection to Oracle or no data for the tablespace
        # offline datafiles are recognized by oracle_recovery_status
        # => we can ignore missing datafile at this point
        # => we need to ignore missing files, otherwise we get UNKNOWN - Item not found in agent output
        raise MKCounterWrapped("no data found for Tablespace")


    ts_status = table_space["status"]
    ts_type   = table_space["type"]

    num_files      = 0
    num_avail      = 0
    num_extensible = 0
    current_size   = 0
    max_size       = 0
    used           = 0
    num_increments = 0
    increment_size = 0
    free_space     = 0

    # Conversion of old autochecks params
    if type(params) == tuple:
        params = { "autoextend" : params[0], "levels" : params[1:] }

    autoext = params.get("autoextend")
    uses_default_increment = False

    for data_file in table_space["data_files"]:
        num_files += 1
        if data_file["status"] in [ "AVAILABLE", "ONLINE", "READONLY" ]:
            num_avail += 1
            current_size += data_file["size"]
            used += data_file["size"] - data_file["free_space"]

            # Autoextensible? Honor max size. Everything is computed in
            # *Bytes* here!
            if data_file["autoextensible"]:
                num_extensible += 1
                max_size += data_file["max_size"]
                free_extension = data_file["max_size"] - data_file["size"] # free extension space
                incsize = data_file["increment_size"]
                if incsize == data_file["block_size"]:
                    uses_default_increment = True

                #incs, rest = divmod(free_extension, incsize)
                #if rest:
                #    # ??? Was ist, wenn es nicht genau aufgeht und ein weiteres
                #    # increment max_size 端berschreiten w端rde? Das geht ja wohl
                #    # nicht oder??
                #    # incs += 1 ### Dann w端rde max_size 端berschritten!
                incs = free_extension / incsize
                num_increments += incs
                increment_size += incsize * incs

                # The free space in this table is the current free space plus
                # the additional space that can be gathered by using all available
                # remaining increments
                free_space += increment_size + data_file["free_space"]

            # not autoextensible: take current size as maximum
            else:
                max_size += data_file["size"]
                free_space += data_file["free_space"]


    if ts_status == None:
        # In case of missing information we assume that the login into
        # the database has failed and we simply skip this check. It won't
        # switch to UNKNOWN, but will get stale.
        raise MKCounterWrapped("Login into database failed")


    warn, crit, levels_text, output_as_percentage = db_get_tablespace_levels_in_bytes(max_size, params)

    infotext = "%s (%s), size: %s, free: " % \
       (ts_status,
        ts_type,
        get_bytes_human_readable(current_size))

    if output_as_percentage:
        infotext += "%.1f%%" % (100.0 * (max_size - used) / max_size)
    else:
        infotext += get_bytes_human_readable(max_size - used)

    if num_extensible > 0:
        infotext += ", maximum size: %s" % get_bytes_human_readable(max_size)
        infotext += " - %d increments (%s)" % \
            (num_increments, get_bytes_human_readable(increment_size))

    status = 0

    # Check increment size, should not be set to default (1)
    if params.get("defaultincrement"):
        if uses_default_increment:
            infotext += ", DEFAULT INCREMENT(!)"
            status = 1

    # Check autoextend status if parameter not set to None
    if autoext != None:
        if autoext and num_extensible == 0:
            infotext += ", NO AUTOEXTEND(!!)"
            status = 2
        elif not autoext and num_extensible > 0:
            infotext += ", AUTOTEXTEND(!!)"
            status = 2
    elif num_extensible > 0:
        infotext += ", autoextend"
    else:
        infotext += ", no autoextend"

    # Check free space, but only if status is not READONLY
    # and Tablespace-Type must be PERMANENT
    if ts_status != "READONLY" and ts_type == 'PERMANENT':
        if (crit is not None and free_space <= crit) \
           or (warn is not None and free_space <= warn):
            infotext += ", only %s left" % get_bytes_human_readable(free_space)
            infotext += levels_text
            if free_space <= crit:
                status = 2
            else:
                status = max(1, status)

    perfdata = [ ("size", current_size, max_size - (warn or 0), max_size - (crit or 0)),
                 ("used", used),
                 ("max_size", max_size) ]

    if num_files != 1 or num_avail != 1 or num_extensible != 1:
        infotext += ", %d data files (%d avail, %d autoext)" % (num_files, num_avail, num_extensible)

    return status, infotext, perfdata

check_info['oracle_tablespaces'] = {
    "parse_function"          : parse_oracle_tablespaces,
    "inventory_function"      : inventory_oracle_tablespaces,
    "check_function"          : check_oracle_tablespaces,
    "service_description"     : "ORA %s Tablespace",
    "has_perfdata"            : True,
    "node_info"               : True,
    "group"                   : "oracle_tablespaces",
    "default_levels_variable" : "oracle_tablespaces_defaults",
    "includes"                : [ "oracle.include", "db.include" ]
}
