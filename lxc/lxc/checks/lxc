#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# This plugin is NOT part of the official release of Check_MK!
# There are no parameters or templates for pnp existing. This comes in
# the future.
#
# written by Thorsten Bruhns (thorsten.bruhns@googlemail.com)

#
# <<<lxc>>>
# Name:           omd
# State:          RUNNING
# PID:            529
# IP:             192.168.100.128
# CPU use:        1830256865353
# BlkIO use:      277733376


def parse_lxc(info):
    parsed = []
    details = {}

    for line in info:

        if line[0] == 'Name:':

            # write an existing dict before clearing it
            if 'Name' in details:
                parsed.append(details.copy())

            # clear an existing dictionary
            details = {}

        key = ' '.join(line[0:-1]).translate(None, ':')
        value = line[-1]
        # skip IPv6 adresses
        if key == 'IP' and value.find(':') > 1:
            continue
        details[key] = value

    if 'Name' in details:
        parsed.append(details.copy())

    return parsed

def inventory_lxc(parsed):
    return [ (line["Name"], None) for line in parsed if "Name" in line ]

def check_lxc(item, params, parsed):
    for line in parsed:
        if "Name" in line and line["Name"] == item:

            perfdata = []
            this_time = int(time.time())


            if line["State"] in ("RUNNING", "FROZEN"):

                line.setdefault("BlkIO use", -1)
                line.setdefault("CPU use", -1)

                try:
                    cpu_used_rate = get_rate("lxc.cpu_used" \
                                       , this_time, float(line["CPU use"]), onwrap=RAISE)
                except MKCounterWrapped:
                    cpu_used_rate = 0

                infotext = "%s is %s CPU used per Second: %s Memory used: %s CPU used: %s BlkIO: %s IP: %s PID: %s" % \
                            (item, line["State"] \
                            , round(cpu_used_rate/1000000000000,2) \
                            , get_bytes_human_readable(int(line["Memory use"])) \
                            , get_age_human_readable(int(line["CPU use"])/1000000000) \
                            , get_bytes_human_readable(int(line["BlkIO use"])) \
                            , line["IP"] \
                            , line["PID"]
                            )

                perfdata.append(("cpu", int(line["CPU use"]), '', '', 0))
                perfdata.append(("memory", int(line["Memory use"]), '', '', 0))
                if int(line["BlkIO use"]) <> -1:
                    perfdata.append(("blockio", int(line["BlkIO use"]), '', '', 0))

            else:
                infotext = "%s is %s" % (item, line["State"])

            return (0, infotext, perfdata)


check_info["lxc"] = {
    'check_function':          check_lxc,
    'inventory_function':      inventory_lxc,
    'service_description':     'lxc Container %s',
    "parse_function":          parse_lxc,
    'has_perfdata':            True,
    'group':                   'lxc',
}
